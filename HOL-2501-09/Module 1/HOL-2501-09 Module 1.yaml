---
project: HOL Project
kind: PIPELINE
name: CleanUpPipeline
icon: organization,left, is-pink
enabled: true
global: false
concurrency: 5
input:
  aria-auto_admin_domain: vcf.holo.lab
  aria-auto_admin_username: hol.admin@vcf.holo.lab
  aria-auto_fqdn: rainpole.auto.vcf.sddc.lab
_inputMeta:
  aria-auto_admin_username:
    description: ''
    mandatory: true
  aria-auto_admin_domain:
    description: ''
    mandatory: true
  aria-auto_fqdn:
    description: ''
    mandatory: true
workspace:
  type: DOCKER
  endpoint: HOL Docker
  image: gitlab.vcf.sddc.lab:5050/holadmin/registry/k8s-ci:latest
  registry: ''
  path: ''
  autoCloneForTrigger: false
  limits:
    memory: 512
    cpu: 1.0
stageOrder:
- Prepare
- Destroy
stages:
  Destroy:
    taskOrder:
    - Delete K8S Zone
    - Delete K8S Cluster
    - Delete Supervisor Cluster
    tasks:
      Delete K8S Cluster:
        type: REST
        ignoreFailure: true
        preCondition: ${Prepare.Get K8S Clusters.output.responseJson.content[0].name} == "dev-project"
        input:
          action: delete
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/k8s/clusters/${Prepare.Get K8S Clusters.output.responseJson.content[0].id}
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Delete K8S Zone:
        type: REST
        ignoreFailure: true
        preCondition: ${Prepare.Get K8S Zones.output.responseJson.content[0].name} == "HOL vSphere with
          Tanzu"
        input:
          action: delete
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/k8s-zones/${Prepare.Get K8S Zones.output.responseJson.content[0].id}
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Delete Supervisor Cluster:
        type: REST
        ignoreFailure: true
        preCondition: ${Prepare.Get Supervisor Cluster.output.responseJson.content[0].name} == "Workload1"
        input:
          action: delete
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/supervisor-clusters/${Prepare.Get Supervisor
            Cluster ID.output.exports.clusterId}
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
  Prepare:
    taskOrder:
    - Get API Token
    - Get K8S Zones,Get K8S Clusters
    - Get Supervisor Cluster,Get Supervisor Namespace
    - Get Supervisor Cluster ID
    tasks:
      Get K8S Zones:
        type: REST
        input:
          action: get
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/k8s-zones
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Get Supervisor Cluster:
        type: REST
        input:
          action: get
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/supervisor-clusters
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Get API Token:
        type: REST
        input:
          action: post
          url: https://${input.aria-auto_fqdn}/csp/gateway/am/api/login?access_token
          headers:
            Accept: application/json
            Content-Type: application/json
          payload: |-
            {
              "username": "${input.aria-auto_admin_username}",
              "password": "${var.aria-auto_admin_password}",
              "domain": "${input.aria-auto_admin_domain}"
            }
      Get K8S Clusters:
        type: REST
        input:
          action: get
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/k8s/clusters
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Get Supervisor Namespace:
        type: REST
        input:
          action: get
          url: https://${input.aria-auto_fqdn}/cmx/api/resources/supervisor-namespaces
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: ${Prepare.Get API Token.output.responseHeaders.Authorization}
          payload: ''
      Get Supervisor Cluster ID:
        type: CI
        input:
          steps:
          - echo "Fetching Cluster ID"
          - ''
          - export clusterId=$(echo "${Prepare.Get Supervisor Cluster.output.responseJson.content[0].documentSelfLink}"
            | grep -o '[0-9a-f]\{40\}')
          export:
          - clusterId
          artifacts: [
            ]
          process: [
            ]
